<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guawaji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guawaji.github.io/"/>
  <updated>2019-03-05T09:40:03.527Z</updated>
  <id>https://guawaji.github.io/</id>
  
  <author>
    <name>guawaji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 fastlane 进行 iOS App自动打包</title>
    <link href="https://guawaji.github.io/2018/06/27/use-fastlane/"/>
    <id>https://guawaji.github.io/2018/06/27/use-fastlane/</id>
    <published>2018-06-27T11:05:20.000Z</published>
    <updated>2019-03-05T09:40:03.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-fastlane-进行-iOS-App自动打包"><a href="#使用-fastlane-进行-iOS-App自动打包" class="headerlink" title="使用 fastlane 进行 iOS App自动打包"></a>使用 fastlane 进行 iOS App自动打包</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>公司 App工厂 项目每天要进行10来次打包分发测试，并且要根据要求按环境、配置进行打包。如果使用手动的方式，不仅效率低，还容易配置出错，对于开发人员来说相当折磨。</p><p><code>Xcodebuild</code> 是一个命令行打包命令，配合脚本使用可以实现简单的打包分发流程，可是不方便更改项目内的一些配置和灵活管理开发者中心的 <code>Certificates</code> 、 <code>Identifiers</code> 、 <code>Provisioning Profiles</code>  。</p><p><code>Fastlane</code> 不仅可以更快的打包，还能够帮助开发者团队管理证书，生成 <code>App ID</code> 、 <code>Provisioning Profile</code> ，生成应用截图，处理代码签名，甚至提交审核。</p><p>接下来记录一下我使用 <code>fastlane</code> 时碰到的一些问题。</p><h3 id="使用-fastlane"><a href="#使用-fastlane" class="headerlink" title="使用 fastlane"></a>使用 fastlane</h3><h5 id="首先安装fastlane"><a href="#首先安装fastlane" class="headerlink" title="首先安装fastlane"></a>首先安装fastlane</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] gem install fastlane -NV</span><br></pre></td></tr></table></figure><h5 id="加载-env文件里的环境变量，使用-dotenv-——-A-Ruby-gem-to-load-environment-variables-from-env"><a href="#加载-env文件里的环境变量，使用-dotenv-——-A-Ruby-gem-to-load-environment-variables-from-env" class="headerlink" title="加载.env文件里的环境变量，使用 dotenv —— A Ruby gem to load environment variables from .env."></a>加载.env文件里的环境变量，使用 <a href="https://github.com/bkeepers/dotenv" target="_blank" rel="noopener">dotenv</a> —— A Ruby gem to load environment variables from <code>.env</code>.</h5><p>Add this line to the top of your application’s Gemfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;dotenv-rails&apos;, groups: [:development, :test]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bundle</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install dotenv</span><br></pre></td></tr></table></figure><h5 id="使用-update-info-plist"><a href="#使用-update-info-plist" class="headerlink" title="使用 update_info_plist"></a>使用 update_info_plist</h5><blockquote><p>error: You must specify either a plist path or a scheme</p></blockquote><p>必须设置 plist path 或者 scheme ，然后就可以找到对应的 plist 文件更改CFBundleDisplayName，CFBundleShortVersionString之类的值了。</p><p>注意：</p><p>使用 <code>update_info_plist</code> 修改不了项目Bundle ID（一般info.plist文件里面<code>CFBundleIdentifier</code>的值是<code>$(PRODUCT_BUNDLE_IDENTIFIER)</code>），因为并不会修改<code>Build Settings</code>里<code>PRODUCT_BUNDLE_IDENTIFIER</code>的值。参考 <a href="https://github.com/fastlane/fastlane/issues/684" target="_blank" rel="noopener">issue</a>。</p><h5 id="produce"><a href="#produce" class="headerlink" title="produce"></a>produce</h5><blockquote><p>error: User <a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">foo@bar.com</a> doesn’t have enough permission for the following action: user_details_data</p></blockquote><p>出现这个错误是由于我用的开发者账号（企业账号）没有 <code>user_details_data</code> 的权限（应该是跟 <code>appstoreconnect</code> 相关），而参数 <code>skip_itc</code> 没有设为 <code>false</code> 。</p><p>还有一个问题是：要想使用 <code>produce</code> 修改已经生成的App ID的 services ，目前produce cannot modify services with a lane，参考这个<a href="https://github.com/fastlane/fastlane/issues/8478" target="_blank" rel="noopener">issue</a>，可以改用命令行修改，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &quot;fastlane produce enable_services --push_notification -a #&#123;bundle_id&#125;&quot;</span><br></pre></td></tr></table></figure><p>去文档上查了一下发现有 <code>modify_services</code> 这个 action 可以修改，不过我没有去使用过。</p><p>如果项目里有multiple targets (e.g. Today Widget or WatchOS Extension or Notification Extension)，也需要使用produce创建对应的App ID。然而我碰到过另一个问题：</p><blockquote><p>An App ID with Identifier ‘com.foo.bar.push’ is not available. Please enter a different string</p></blockquote><p>这个错误应该是由于<code>com.foo.bar.push</code>这个Bundle ID被其它开发者账号用来创建了App ID，解决办法就是：</p><ol><li>改用另一个</li><li>去那个开发者账号（如果你知道）删除对应的App ID。</li></ol><p>可是Xcode开启了自动签名却能生成有效的pp文件，我检查了一下pp文件，发现App ID名称是XC Wildcard，能匹配所有的Bundle ID。接下来我去查了一下资料，发现这是因为Extension的target不使用capabilities，当Xcode开启自动签名，fix issue时，可能会adding a wildcard team provisioning profile，</p><blockquote><p>Using a Wildcard App ID is convenient for all apps that do not use capabilities, as they can reuse the same provisioning profile for code signing</p></blockquote><h5 id="match"><a href="#match" class="headerlink" title="match"></a>match</h5><blockquote><p>error: Could not create another Distribution certificate, reached the maximum number of available Distribution certificates.</p></blockquote><p>当开发者账户中已经有了最大数量的证书时，fastlane match不能创建新的证书，然而也不能使用本地 keychain 中可用的证书并推送到git仓库。</p><p>这个 <a href="https://github.com/fastlane/fastlane/issues/12250" target="_blank" rel="noopener">issue</a> 就有人提到希望fastlane match可以使用本地可用的证书。</p><blockquote><p>There will be good to have build-in initializer to export all existing certificates to git repo.</p><p>The steps are, for example, described here:<br><a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x68;&#x74;&#116;&#x70;&#x73;&#58;&#47;&#47;&#109;&#x65;&#x64;&#x69;&#x75;&#x6d;&#46;&#x63;&#111;&#x6d;&#x2f;&#x40;&#x6a;&#x6f;&#110;&#97;&#x74;&#x68;&#x61;&#x6e;&#99;&#97;&#114;&#100;&#111;&#115;&#x6f;&#x2f;&#117;&#x73;&#105;&#110;&#x67;&#x2d;&#x66;&#x61;&#x73;&#116;&#108;&#x61;&#x6e;&#x65;&#x2d;&#x6d;&#x61;&#116;&#x63;&#104;&#x2d;&#x77;&#x69;&#116;&#104;&#x2d;&#101;&#120;&#x69;&#115;&#116;&#x69;&#x6e;&#x67;&#45;&#x63;&#x65;&#114;&#x74;&#105;&#102;&#x69;&#x63;&#x61;&#116;&#101;&#115;&#45;&#119;&#105;&#116;&#104;&#x6f;&#117;&#x74;&#x2d;&#x72;&#101;&#x76;&#111;&#107;&#105;&#110;&#x67;&#x2d;&#116;&#x68;&#101;&#109;&#x2d;&#x61;&#51;&#x32;&#53;&#x62;&#x65;&#x36;&#x39;&#100;&#x61;&#x63;&#54;">&#x68;&#x74;&#116;&#x70;&#x73;&#58;&#47;&#47;&#109;&#x65;&#x64;&#x69;&#x75;&#x6d;&#46;&#x63;&#111;&#x6d;&#x2f;&#x40;&#x6a;&#x6f;&#110;&#97;&#x74;&#x68;&#x61;&#x6e;&#99;&#97;&#114;&#100;&#111;&#115;&#x6f;&#x2f;&#117;&#x73;&#105;&#110;&#x67;&#x2d;&#x66;&#x61;&#x73;&#116;&#108;&#x61;&#x6e;&#x65;&#x2d;&#x6d;&#x61;&#116;&#x63;&#104;&#x2d;&#x77;&#x69;&#116;&#104;&#x2d;&#101;&#120;&#x69;&#115;&#116;&#x69;&#x6e;&#x67;&#45;&#x63;&#x65;&#114;&#x74;&#105;&#102;&#x69;&#x63;&#x61;&#116;&#101;&#115;&#45;&#119;&#105;&#116;&#104;&#x6f;&#117;&#x74;&#x2d;&#x72;&#101;&#x76;&#111;&#107;&#105;&#110;&#x67;&#x2d;&#116;&#x68;&#101;&#109;&#x2d;&#x61;&#51;&#x32;&#53;&#x62;&#x65;&#x36;&#x39;&#100;&#x61;&#x63;&#54;</a></p><p>Fastlane could just fetch all certificates using Spaceship to get their cert_ids, then extract all identities existing in keychain according to fetched list and then push everything to repo.</p><p>I suppose it to be run once on a build node/developer mac/etc, and then everyone else could just use <code>fastlane match</code> to install all this certificates in a simple and easy way.</p></blockquote><p>当你需要在多个team之间切换时，注意切换分支。</p><blockquote><p><em>match</em> also supports storing certificates of multiple teams in one repo, by using separate git branches. If you work in multiple teams, make sure to set the <code>git_branch</code> parameter to a unique value per team. From there, <em>match</em> will automatically create and use the specified branch for you.</p></blockquote><p>环境变量<code>MATCH_PASSWORD</code>是你最开始使用match时创建的git仓库设置的权限密码。</p><h5 id="gym"><a href="#gym" class="headerlink" title="gym"></a>gym</h5><p>这个 action 是进行 archive 和 export 的。</p><p>archive 需要配置好对应的Bundle ID，Provisioning Profile（development）， developer 证书。</p><p>export需要配置好method，Provisioning Profile（appstore, adhoc, enterprise）， distribution 证书。</p><p>如果项目设置了 <code>Automatically manage signing</code>，gym会使用Xcode默认选择的pp文件，不会使用之前match下载的。这对于Bundle ID不会修改来发布企业包的项目来说没什么操心的，但是如果项目Bundle ID以前是<code>com.foo.bar1</code>，现在需要用新的<code>com.foo.bar2</code>来打包，那么archive得到的文件可能Bundle ID为<code>com.foo.bar2</code>，使用的pp文件却是Bundle ID为<code>com.foo.bar1</code>的。之后export（使用的pp文件是新生成的Bundle ID为<code>com.foo.bar2的</code>的）就会报错如下：</p><blockquote><p>error: exportArchive: Provisioning profile “match InHouse com.foo.bar2” doesn’t match the entitlements file’s value for the application-identifier entitlement.</p></blockquote><p>就是 archive 和 export 使用的 pp 文件Bundle ID不同。</p><p>gym 虽然有 xcargs 这个参数可以配置 archive 时候的Provisioning Profile，可是项目如果有multiple targets (e.g. Today Widget or WatchOS Extension or Notification Extension)，这一个参数怎么给多个target配置pp文件。</p><p>于是查看了很多issue之后，发现了<code>automatic_code_signing</code>这个action既可以关闭<code>Automatically manage signing</code>，又可以根据target来设置pp文件。</p><p>做好了 archive 和 export 的签名匹配之后，gym打包就能成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-allowProvisioningUpdates  </span><br><span class="line">Allow xcodebuild to communicate with the Apple Developer website. </span><br><span class="line">For automatically signed targets, xcodebuild will create and update profiles, app IDs, and certificates. </span><br><span class="line">For manually signed targets, xcodebuild will download missing or updated provisioning profiles.</span><br><span class="line">Requires a developer account to have been added in Xcode&apos;s Accounts preference pane.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">According to xcodebuild -help, signingStyle defaults to automatic for apps that were automatically signed when archived (which is our case). I assume this is the reason xcodebuild seems to ignore the provisioningProfiles entry..</span><br></pre></td></tr></table></figure><p>gym error:</p><p>gym archive 的过程是根据Xcode中配置的Provisioning Profile（type是development，证书是开发者证书）来 archive 的，export 需要的Provisioning Profile（type是production，证书是发布证书），得注意检查这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: exportArchive: &quot;PushSerives.appex&quot; requires a provisioning profile.</span><br></pre></td></tr></table></figure><p>由于项目包含notification service extension，需要 provisioning profile ，所以先使用produce生成App ID，再使用match（其实是sign）生成 provisioning profile ，</p><blockquote><p>error: exportArchive: Provisioning profile “match InHouse com.sobeycloud.enterprise.test1” doesn’t support the Push Notifications capability.</p><p>error: exportArchive: Provisioning profile “match InHouse com.sobeycloud.enterprise.test1” doesn’t include the aps-environment entitlement and doesn’t match the entitlements file’s value for the application-identifier entitlement.</p><p>error: exportArchive: Provisioning profile “match InHouse com.sobeycloud.enterprise.test1.push” doesn’t match the entitlements file’s value for the application-identifier entitlement.</p></blockquote><h3 id="Jenkins-fastlane"><a href="#Jenkins-fastlane" class="headerlink" title="Jenkins+fastlane"></a>Jenkins+fastlane</h3><p>Error:</p><blockquote><p>fastlane:  command not found</p><p>bundle: command not found</p></blockquote><p><a href="https://stackoverflow.com/questions/10365792/cant-run-jenkins-build-bundle-command-not-found" target="_blank" rel="noopener">stackoverflow</a>上有解释，不过在使用全路径时，到后面可能又会碰到error:</p><blockquote><p>xcpretty: command not found  </p></blockquote><p>根据<a href="https://github.com/fastlane/fastlane/issues/12331" target="_blank" rel="noopener">issue</a>里的描述，可以在”构建”中的shell命令中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/usr/local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Fatal: could not read Username for ‘<a href="https://foo.bar" target="_blank" rel="noopener">https://foo.bar</a>‘: terminal prompts disabled</p></blockquote><p>可参照：<a href="https://github.com/fastlane/fastlane/issues/7805" target="_blank" rel="noopener">issue</a></p><blockquote><p>As you probably know, since you can’t type in a password during your CI builds, <em>match</em> &amp; Git will have trouble using the <code>https</code> authentication method unless your build machine has its keychain set up with the right credentials for your repository.</p><p>The error message you provided is letting you know that <em>match</em> could not determine the right password to use. It needed to prompt you, but on CI, it is not allowed to prompt because that would cause the build to hang.</p><p>Our suggestion would be to investigate the Keychains and Provisioning Profiles Plugin mentioned</p></blockquote><p>Error: </p><p><img src="https://upload-images.jianshu.io/upload_images/1057499-ab46faf34a41f96f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jenkins-fastlane error">检查后发现证书和配置文件是下载到打包机器上了的，可是没有打开钥匙串访问权限，所以 CodeSign 失败。</p><p>Success:</p><p><img src="https://upload-images.jianshu.io/upload_images/1057499-ee44c8318c9ed449.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jenkins-fastlane success1"></p><p>钉钉上的机器人提醒：</p><p><img src="https://upload-images.jianshu.io/upload_images/1057499-e418b8812a8a4ff6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="success2"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于项目总共有大量租户App，工作时间随时都可能会有发布企业包测试要求，而每个租户App的环境与配置都不一样，我们开发人员一个一个手动修改环境和配置文件将耗费很大的精力与时间，且容易出错。于是我将所需配置的变量全部放在 <code>.env</code> 文件中，包括要上架 <code>App Store</code> 的开发者账号，将证书同步到Git中管理，保证能够在企业账号和不同公司账号之间自动切换。最后成功将打包+分发时间从 <strong>30分钟以上</strong> 降低到 <strong>3分钟以内</strong> ，且大大降低了手动修改环境和配置造成的出错概率。</p><p>以下是 <code>Fastfile</code> 中的核心代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">xcodeproj_path = <span class="string">"./MyApp.xcodeproj"</span></span><br><span class="line"></span><br><span class="line">username = ENV[<span class="string">"FASTLANE_USER"</span>]</span><br><span class="line">team_id = ENV[<span class="string">"TEAM_ID"</span>]</span><br><span class="line">scheme = ENV[<span class="string">"SCHEME"</span>]</span><br><span class="line">bundle_id = ENV[<span class="string">"BUNDLE_ID"</span>]</span><br><span class="line">app_name = ENV[<span class="string">"APP_NAME"</span>]</span><br><span class="line">version_number = ENV[<span class="string">"VERSION"</span>]</span><br><span class="line">build_number = ENV[<span class="string">"BUILD"</span>]</span><br><span class="line">export_method = ENV[<span class="string">"EXPORT_METHOD"</span>]</span><br><span class="line"></span><br><span class="line">pgy_api_key = ENV[<span class="string">"pgy_api_key"</span>]</span><br><span class="line">pgy_user_key = ENV[<span class="string">"pgy_user_key"</span>]</span><br><span class="line">sentry_auth_token = ENV[<span class="string">"sentry_auth_token"</span>]</span><br><span class="line">sentry_org_slug = ENV[<span class="string">"sentry_org_slug"</span>]</span><br><span class="line">sentry_project_slug = ENV[<span class="string">"sentry_project_slug"</span>]</span><br><span class="line"></span><br><span class="line">url_schemes_wechat = [ENV[<span class="string">"app_key_wechat"</span>]]</span><br><span class="line">url_schemes_qq = [<span class="string">"tencent"</span> + ENV[<span class="string">"app_key_qq"</span>]]</span><br><span class="line">url_schemes_sina = [<span class="string">"wb"</span> + ENV[<span class="string">"app_key_sina"</span>]]</span><br><span class="line">url_schemes_eg = [ENV[<span class="string">"app_key_eg"</span>]]</span><br><span class="line">url_schemes_yz = [ENV[<span class="string">"app_key_yz"</span>]]</span><br><span class="line">url_schemes_appfactory = [bundle_id.delete(<span class="string">"."</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  before_all <span class="keyword">do</span> <span class="params">|lane, options|</span></span><br><span class="line"></span><br><span class="line">    setup_jenkins</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">"Push a new beta build to pgy"</span></span><br><span class="line">  lane <span class="symbol">:build</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line"></span><br><span class="line">  on_update_info_plist</span><br><span class="line">  on_match </span><br><span class="line">    on_gym</span><br><span class="line"></span><br><span class="line">    upload_symbols_to_sentry(</span><br><span class="line">      <span class="symbol">auth_token:</span> sentry_auth_token,</span><br><span class="line">      <span class="symbol">org_slug:</span> sentry_org_slug,</span><br><span class="line">      <span class="symbol">project_slug:</span> sentry_project_slug,</span><br><span class="line">      ) <span class="keyword">if</span> export_method == <span class="string">"appstore"</span></span><br><span class="line"></span><br><span class="line">    pgyer(</span><br><span class="line">      <span class="symbol">api_key:</span> pgy_api_key, </span><br><span class="line">      <span class="symbol">user_key:</span> pgy_user_key,</span><br><span class="line">      ) <span class="keyword">unless</span> export_method == <span class="string">"appstore"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  lane <span class="symbol">:on_match</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  produce(</span><br><span class="line">      <span class="symbol">username:</span> username,</span><br><span class="line">      <span class="symbol">app_identifier:</span> bundle_id,</span><br><span class="line">      <span class="symbol">app_name:</span> app_name,</span><br><span class="line">      <span class="symbol">skip_itc:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">enable_services:</span> &#123;</span><br><span class="line">        <span class="symbol">push_notification:</span> <span class="string">"on"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  match(</span><br><span class="line">        <span class="symbol">git_branch:</span> username,</span><br><span class="line">        <span class="symbol">username:</span> username,</span><br><span class="line">        <span class="symbol">type:</span> <span class="string">"development"</span>,</span><br><span class="line">        <span class="symbol">app_identifier:</span> [bundle_id],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    match(</span><br><span class="line">        <span class="symbol">git_branch:</span> username,</span><br><span class="line">        <span class="symbol">username:</span> username,</span><br><span class="line">        <span class="symbol">type:</span> export_method,</span><br><span class="line">        <span class="symbol">app_identifier:</span> [bundle_id],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  lane <span class="symbol">:on_gym</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    profile_name = ENV[<span class="string">"sigh_<span class="subst">#&#123;bundle_id&#125;</span>_development_profile-name"</span>]</span><br><span class="line"></span><br><span class="line">  UI.important <span class="string">"profile_name = '<span class="subst">#&#123;profile_name&#125;</span>'"</span></span><br><span class="line"></span><br><span class="line">    automatic_code_signing(</span><br><span class="line">      <span class="symbol">path:</span> xcodeproj_path, </span><br><span class="line">      <span class="symbol">targets:</span> [scheme],</span><br><span class="line">      <span class="symbol">use_automatic_signing:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="symbol">profile_name:</span> profile_name,</span><br><span class="line">      <span class="symbol">team_id:</span> team_id,</span><br><span class="line">      <span class="symbol">bundle_identifier:</span> bundle_id,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">scheme:</span> scheme,  </span><br><span class="line">      <span class="comment"># clean: true,</span></span><br><span class="line">      <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">method:</span> export_method,</span><br><span class="line">      &#125;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  lane <span class="symbol">:on_update_info_plist</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    update_info_plist(</span><br><span class="line">        <span class="symbol">xcodeproj:</span> xcodeproj_path,</span><br><span class="line">        <span class="symbol">scheme:</span> scheme,</span><br><span class="line">        <span class="symbol">block:</span> proc <span class="keyword">do</span> <span class="params">|plist|</span></span><br><span class="line">          plist[<span class="string">"CFBundleDisplayName"</span>] = app_name</span><br><span class="line">          plist[<span class="string">"CFBundleName"</span>] = app_name</span><br><span class="line">          plist[<span class="string">"CFBundleShortVersionString"</span>] = version_number</span><br><span class="line">          plist[<span class="string">"CFBundleVersion"</span>] = build_number</span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"appfactory"</span> &#125;</span><br><span class="line">          <span class="keyword">if</span> urlScheme</span><br><span class="line">            urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_appfactory</span><br><span class="line">          <span class="keyword">else</span> </span><br><span class="line">            plist[<span class="string">"CFBundleURLTypes"</span>] = plist[<span class="string">"CFBundleURLTypes"</span>] + [&#123;<span class="string">"CFBundleTypeRole"</span> =&gt; <span class="string">"Editor"</span>, <span class="string">"CFBundleURLName"</span> =&gt; <span class="string">"appfactory"</span>, <span class="string">"CFBundleURLSchemes"</span> =&gt; url_schemes_appfactory&#125;]</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"weixin"</span> &#125;</span><br><span class="line">          urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_wechat <span class="keyword">if</span> urlScheme</span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"tencentLogin"</span> &#125;</span><br><span class="line">          urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_qq <span class="keyword">if</span> urlScheme</span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"wb"</span> &#125;</span><br><span class="line">          urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_sina <span class="keyword">if</span> urlScheme</span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"EGMonitor"</span> &#125;</span><br><span class="line">          urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_eg <span class="keyword">if</span> urlScheme</span><br><span class="line">          urlScheme = plist[<span class="string">"CFBundleURLTypes"</span>].find&#123; <span class="params">|scheme|</span> scheme[<span class="string">"CFBundleURLName"</span>] == <span class="string">"YZYUN"</span> &#125;</span><br><span class="line">          urlScheme[<span class="string">"CFBundleURLSchemes"</span>] = url_schemes_yz <span class="keyword">if</span> urlScheme</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-fastlane-进行-iOS-App自动打包&quot;&gt;&lt;a href=&quot;#使用-fastlane-进行-iOS-App自动打包&quot; class=&quot;headerlink&quot; title=&quot;使用 fastlane 进行 iOS App自动打包&quot;&gt;&lt;/a&gt;使用 fastl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在项目中引入 ijkplayer</title>
    <link href="https://guawaji.github.io/2018/06/11/use-ijkplayer/"/>
    <id>https://guawaji.github.io/2018/06/11/use-ijkplayer/</id>
    <published>2018-06-11T09:25:20.000Z</published>
    <updated>2019-03-05T10:11:50.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ijkplayer"><a href="#ijkplayer" class="headerlink" title="ijkplayer"></a>ijkplayer</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a> 是 Bilibili 开源的一款提供给iOS/Android平台的视频播放器，基于 FFmpeg，支持 MediaCodec，VideoToolbox。官方不直接提供 framework框架包，而是给出相关的配置文件，这样我们可以根据需要来选择配置，编译并打包</p><h3 id="获取、编译、打包"><a href="#获取、编译、打包" class="headerlink" title="获取、编译、打包"></a>获取、编译、打包</h3><h4 id="获取ijkplayer、openssl（支持HTTPS，可选）、ffmpeg"><a href="#获取ijkplayer、openssl（支持HTTPS，可选）、ffmpeg" class="headerlink" title="获取ijkplayer、openssl（支持HTTPS，可选）、ffmpeg"></a>获取ijkplayer、openssl（支持HTTPS，可选）、ffmpeg</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> clone ijkplayer 到本地</span><br><span class="line">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios</span><br><span class="line"></span><br><span class="line">cd ijkplayer-ios</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 基于远程 branch/tag "k0.8.8"，创建一个叫"latest"的分支</span><br><span class="line">git checkout -B latest k0.8.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 拉取openssl 可去掉armv7(32位的真机)</span><br><span class="line">sh init-ios-openssl.sh</span><br><span class="line"><span class="meta">#</span> 拉取ffmpeg 可去掉armv7</span><br><span class="line">sh init-ios.sh</span><br></pre></td></tr></table></figure><blockquote><p>In iOS devices, armv7 means iPhone 4 or iPad 1 and so on, armv7s meas iPhone 5 and so on, all it’s 32 bit device. And Apple has required all apps should run on 64 bit.</p></blockquote><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>有三个脚本来配置编解码器的功能支持，可根据需要选择或者更改</p><ul><li><code>module-default.sh</code> 更多的编解码器/格式</li><li><code>module-lite-hevc.sh</code> 较少的编解码器/格式（包括hevc）</li><li><code>module-lite.sh</code> 较少的编解码器/格式（默认）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line"># 建立软连接：可选&apos;module-default.sh&apos;，&apos;module-lite-hevc.sh&apos;，&apos;module-lite.sh&apos;</span><br><span class="line">ln -s module-lite.sh module.sh</span><br></pre></td></tr></table></figure><p>目前ijkplayer默认不支持HTTPS，如果需要，得先启用并编译openssl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 要启用 openssl 组件，得在module.sh脚本文件中添加一行配置</span><br><span class="line">echo &apos;export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-openssl&quot;&apos; &gt;&gt; module.sh</span><br></pre></td></tr></table></figure><p>确认已启用openssl</p><p><img src="https://upload-images.jianshu.io/upload_images/1057499-d0d47252714ae085.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="确认启用openssl"></p><p>然后开始编译，编译ffmpeg前，请查看<a href="https://github.com/Bilibili/ijkplayer/issues/4150" target="_blank" rel="noopener">issue #4150</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./compile-openssl.sh clean</span><br><span class="line">./compile-ffmpeg.sh clean</span><br><span class="line"># 编译openssl 可去掉armv7</span><br><span class="line">./compile-openssl.sh all</span><br><span class="line"># 编译ffmpeg 得去掉armv7</span><br><span class="line">./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure><h4 id="打包framework"><a href="#打包framework" class="headerlink" title="打包framework"></a>打包framework</h4><p>用命令或手动打开 ios 目录下的 IJKMediaPlayer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open IJKMediaPlayer/IJKMediaPlayer.xcodeproj</span><br></pre></td></tr></table></figure><p>这里使用Target <code>IJKMediaFramework</code> 。如果使用 https，就需要手动给 IJKMediaFramework 添加 <code>libcrypto.a</code> 和 <code>libssl.a</code> 文件，默认不会添加。这两个依赖库的目录为: ijkplayer-ios/ios/build/universal/lib，是通过之前 <code>./compile-openssl.sh all</code> 生成的</p><p>参考 <a href="https://blog.wskfz.com/index.php/archives/59/" target="_blank" rel="noopener">这个博客</a></p><p><img src="https://blog.wskfz.com/usr/uploads/2018/04/2087622254.png" alt=""></p><ol><li><p>在 <code>Edit Scheme</code> 中配置 <code>Build Configuration</code> 为 <code>Release</code> 模式</p></li><li><p>选择真机 进行 <code>build</code> 编译，注释掉报错的地方</p></li><li><p>选择模拟器 进行 <code>build</code> 编译</p></li><li><p>合并 <code>framework</code> </p><p>先 <code>cd</code> 到 <code>Products</code> 目录下，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework</span><br></pre></td></tr></table></figure><p>替换</p><p><img src="https://blog.wskfz.com/usr/uploads/2018/04/3198101866.png" alt=""></p><p>这个 <code>IJKMediaFramework.framework</code> 就是打包好的</p></li></ol><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><ul><li>添加下列依赖到工程<ol><li><code>libc++.tbd</code></li><li><code>libz.tbd</code></li><li><code>libbz2.tbd</code></li><li><code>AudioToolbox.framework</code></li><li><code>UIKit.framework</code></li><li><code>CoreGraphics.framework</code></li><li><code>AVFoundation.framework</code></li><li><code>CoreMedia.framework</code></li><li><code>CoreVideo.framework</code></li><li><code>MediaPlayer.framework</code></li><li><code>MobileCoreServices.framework</code></li><li><code>OpenGLES.framework</code></li><li><code>QuartzCore.framework</code></li><li><code>VideoToolbox.framework</code></li></ol></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.wskfz.com/index.php/archives/59/" target="_blank" rel="noopener">ijkplayer 的编译、打包 framework 和 https 支持</a></p><p><a href="https://www.jianshu.com/p/3fce0bd6f045" target="_blank" rel="noopener">iOS 中的 armv7,armv7s,arm64,i386,x86_64 都是什么</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ijkplayer&quot;&gt;&lt;a href=&quot;#ijkplayer&quot; class=&quot;headerlink&quot; title=&quot;ijkplayer&quot;&gt;&lt;/a&gt;ijkplayer&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxSwfit+MVVM简单实践</title>
    <link href="https://guawaji.github.io/2017/10/07/RxSwfit+MVVM%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>https://guawaji.github.io/2017/10/07/RxSwfit+MVVM简单实践/</id>
    <published>2017-10-07T12:05:20.000Z</published>
    <updated>2019-03-05T09:55:22.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxSwfit-MVVM简单实践"><a href="#RxSwfit-MVVM简单实践" class="headerlink" title="RxSwfit+MVVM简单实践"></a>RxSwfit+MVVM简单实践</h1><h3 id="一个简单的活动列表展示页面"><a href="#一个简单的活动列表展示页面" class="headerlink" title="一个简单的活动列表展示页面"></a>一个简单的活动列表展示页面</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">LoadingHUD</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Bindable sink for `startAnimating()`, `stopAnimating()` methods.</span></span><br><span class="line">    <span class="keyword">var</span> isAnimating: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Binder</span>(<span class="keyword">self</span>.base) &#123; hud, active <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> active &#123;</span><br><span class="line">                hud.startAnimating()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hud.stopAnimating()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 加载状态指示器</span></span><br><span class="line">        <span class="keyword">let</span> activityIndicator = <span class="type">ActivityIndicator</span>()</span><br><span class="line">        <span class="comment">// 将网络请求取得活动列表数据转化为可观察的序列，之后驱动 tableView 使用</span></span><br><span class="line">        <span class="comment">// 当观察者对 BehaviorSubject 进行订阅时，它会将源 Observable 中最新的元素发送出来（如果不存在最新的元素，就发出默认元素）。然后将随后产生的元素发送出来。</span></span><br><span class="line">        <span class="keyword">let</span> activityResponseDriver = <span class="type">BehaviorSubject</span>(value: ())</span><br><span class="line">            .flatMapLatest &#123;</span><br><span class="line">                <span class="type">Networking</span></span><br><span class="line">                    .rx.requestObject(<span class="type">ActivityResponse</span>.<span class="keyword">self</span>, url: <span class="type">URL</span>.notifyList)</span><br><span class="line">                    .trackActivity(activityIndicator) <span class="comment">// 追踪加载状态</span></span><br><span class="line">            &#125;</span><br><span class="line">            .asDriver(onErrorJustReturn: <span class="type">ActivityResponse</span>())</span><br><span class="line">        <span class="comment">// 驱动HUD</span></span><br><span class="line">        activityIndicator.asDriver().drive(hud.rx.isAnimating).disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// tableView 数据源</span></span><br><span class="line">        <span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">SectionModel</span>&lt;<span class="type">String</span>, <span class="type">Activity</span>&gt;&gt;(</span><br><span class="line">            configureCell: &#123; (<span class="number">_</span>, tv, indexPath, element) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> cell = tv.dequeueReusableCell(withIdentifier: <span class="type">ActivityListCell</span>.classIdentifier, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">ActivityListCell</span></span><br><span class="line">                cell.activity = element</span><br><span class="line">                <span class="keyword">return</span> cell</span><br><span class="line">            &#125;,</span><br><span class="line">            titleForHeaderInSection: &#123; dataSource, sectionIndex <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> dataSource[sectionIndex].model</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 活动列表数据通过 map 转化为一个section数据 再驱动tableView</span></span><br><span class="line">        activityResponseDriver</span><br><span class="line">            .<span class="built_in">map</span> &#123; [<span class="type">SectionModel</span>(model: kActivityNotificationStringLocalized, items: $<span class="number">0</span>.data)] &#125;</span><br><span class="line">            .drive(tableView.rx.items(dataSource: dataSource))</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        <span class="comment">// 活动列表数据 驱动统计view的展示</span></span><br><span class="line">        activityResponseDriver</span><br><span class="line">            .<span class="built_in">map</span> &#123; $<span class="number">0</span>.informationNum &#125;</span><br><span class="line">            .drive(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (informationNum) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.informationNumView.isHidden = informationNum == <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.informationNumView.setTitle(<span class="string">"<span class="subst">\(informationNum)</span>"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">            &#125;)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        tableView.rx.modelSelected(<span class="type">Activity</span>.<span class="keyword">self</span>)</span><br><span class="line">            .subscribe(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (activity) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> #available(iOS <span class="number">9.0</span>, *) &#123;</span><br><span class="line">                    <span class="keyword">let</span> vc = <span class="type">SFSafariViewController</span>(url: url)</span><br><span class="line">                    vc.title = kActivityNotificationStringLocalized</span><br><span class="line">                    <span class="keyword">self</span>.navigationController?.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> vc = <span class="type">ActivityWebViewController</span>()</span><br><span class="line">                    vc.title = kActivityNotificationStringLocalized</span><br><span class="line">                    vc.url = url</span><br><span class="line">                    <span class="keyword">self</span>.navigationController?.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="一个订单信息列表页面（DataPageable是一个提供分页功能的序列输出功能类）"><a href="#一个订单信息列表页面（DataPageable是一个提供分页功能的序列输出功能类）" class="headerlink" title="一个订单信息列表页面（DataPageable是一个提供分页功能的序列输出功能类）"></a>一个订单信息列表页面（DataPageable是一个提供分页功能的序列输出功能类）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> pageVariable = <span class="type">Variable</span>(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        tableView.mj_header = <span class="type">MJRefreshNormalHeader</span>(refreshingBlock: &#123;</span><br><span class="line">            pageVariable.value = <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        tableView.mj_footer = <span class="type">MJRefreshBackNormalFooter</span>(refreshingBlock: &#123;</span><br><span class="line">            pageVariable.value += <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> viewModel = <span class="type">OrderInfoListViewModel</span>(pageVariable: pageVariable)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hud</span></span><br><span class="line">        viewModel.hudDriver</span><br><span class="line">            .drive(hud.rx.isAnimating)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// tableView dataSource</span></span><br><span class="line">        viewModel.orderInfoListDriver</span><br><span class="line">            .drive(tableView.rx.items(cellIdentifier: <span class="type">OrderInfoCell</span>.classIdentifier, cellType: <span class="type">OrderInfoCell</span>.<span class="keyword">self</span>)) &#123; (row, orderInfo, cell) <span class="keyword">in</span></span><br><span class="line">                cell.orderInfo = orderInfo</span><br><span class="line">            &#125;</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// endRefresh</span></span><br><span class="line">        viewModel.endHeaderRefreshingDriver</span><br><span class="line">            .drive(tableView.rx.endHeaderRefreshing)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        viewModel.endFooterRefreshingDriver</span><br><span class="line">            .drive(tableView.rx.endFooterRefreshing)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// some UI</span></span><br><span class="line">        viewModel.orderInfoListDriver</span><br><span class="line">            .skip(<span class="number">1</span>) <span class="comment">// skip 跳过第一个元素，emptyView.isHidden</span></span><br><span class="line">            .<span class="built_in">map</span> &#123; $<span class="number">0</span>.<span class="built_in">count</span> &gt; <span class="number">0</span> &#125;</span><br><span class="line">            .drive(emptyDataView.rx.isHidden)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// tableView Delegate</span></span><br><span class="line">        tableView.rx</span><br><span class="line">            .modelSelected(<span class="type">OrderInfo</span>.<span class="keyword">self</span>)</span><br><span class="line">            .subscribe(onNext:  &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] orderInfo <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> vc = <span class="type">OrderDetailController</span>()</span><br><span class="line">                vc.tradeNo = orderInfo.tradeNo</span><br><span class="line">                <span class="keyword">self</span>?.navigationController?.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderInfoListViewModel</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// outputs</span></span><br><span class="line">    <span class="keyword">let</span> hudDriver: <span class="type">Driver</span>&lt;<span class="type">Bool</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> orderInfoListDriver: <span class="type">Driver</span>&lt;[<span class="type">OrderInfo</span>]&gt;</span><br><span class="line">    <span class="keyword">let</span> endHeaderRefreshingDriver: <span class="type">Driver</span>&lt;<span class="type">Void</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> endFooterRefreshingDriver: <span class="type">Driver</span>&lt;<span class="type">Int</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(pageVariable: <span class="type">Variable</span>&lt;<span class="type">Int</span>&gt;) &#123;</span><br><span class="line">        <span class="comment">// 元组，包含网络请求状态序列、数据列表序列，刷新信号</span></span><br><span class="line">        <span class="keyword">let</span> driversTuple = <span class="type">DataPageable</span>.getDriversTuple(pageVariable: pageVariable, url: <span class="type">URL</span>.consumeRecordQuery, param: [<span class="string">"mobile"</span>: <span class="type">UserManager</span>.shared.currentUser!.mobile], type: <span class="type">OrderInfo</span>.<span class="keyword">self</span>, path: <span class="string">"orderInfo"</span>)</span><br><span class="line">        <span class="keyword">let</span> taskStatusDriver = driversTuple.taskStatusDriver</span><br><span class="line">        orderInfoListDriver = driversTuple.dataListDriver</span><br><span class="line">        endHeaderRefreshingDriver = driversTuple.endHeaderRefreshingDriver</span><br><span class="line">        endFooterRefreshingDriver = driversTuple.endFooterRefreshingDriver</span><br><span class="line">        </span><br><span class="line">        hudDriver = <span class="type">Driver</span></span><br><span class="line">            .combineLatest(taskStatusDriver, orderInfoListDriver) &#123; $<span class="number">0</span>.isExecuting &amp;&amp; $<span class="number">1</span>.isEmpty &#125;</span><br><span class="line">            .distinctUntilChanged()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h3><p>我最开始是通过 <img src="https://upload-images.jianshu.io/upload_images/1057499-a01d7ff65ec5df8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RxSwift电子书"> 官方电子书 + Demo来学习的，也看过 <a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/" target="_blank" rel="noopener">中文文档</a>  。看到不是特别能理解的内容时（比如各种创建序列的方式、Subject、Operator），跟着敲一下代码，运行一下，感觉会比较容易记忆和理解，也会惊叹代码还可以这样简洁，感觉学习 RxSwift 是个非常有趣的过程。然后把现有的工程一点点MVVM化，遇到问题就回头去看文档和Demo，加深印象和理解，基本就能处理一些简单的业务逻辑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RxSwfit-MVVM简单实践&quot;&gt;&lt;a href=&quot;#RxSwfit-MVVM简单实践&quot; class=&quot;headerlink&quot; title=&quot;RxSwfit+MVVM简单实践&quot;&gt;&lt;/a&gt;RxSwfit+MVVM简单实践&lt;/h1&gt;&lt;h3 id=&quot;一个简单的活动列表
      
    
    </summary>
    
    
  </entry>
  
</feed>
